DROP DATABASE dbName;
CREATE DATABASE dbName;
CREATE TABLE tableName(
	id			int,
	column1 datatype,
	column1 datatype
);

ALTER TABLE tableName
	ADD COLUMN column3 type;

	DROP COLUMN column3;


INSERT INTO tableName (column1, column2) VALUES (val1, val2);

UPDATE tableName
	SET variable = value
	WHERE id = id;

DELETE FROM tableName WHERE id = id;

= != > < >= <=
WHERE
AND OR LIKE BETWEEN
# AND == not including last one #1990 AND 2000
# and == including last one? #1990 and 2000
ORDER BY
GROUP BY
LIMIT

SELECT COUNT(*) FROM

SELECT DISTINCT genre FROM movies;
SELECT * FROM movies WHERE imdb_rating > 8;
SELECT * FROM movies WHERE name LIKE 'Se_en';
SELECT * FROM movies WHERE name LIKE 'a%';
SELECT * FROM movies WHERE name LIKE '%man%';
SELECT * FROM movies WHERE name BETWEEN 'A' AND 'J';
SELECT * FROM movies WHERE year BETWEEN 1990 AND 2000 AND genre = 'comedy';
SELECT * FROM movies ORDER BY imdb_rating DESC;
SELECT COUNT(*) FROM fake_apps;

SELECT * FROM albums JOIN artists ON albums.artist_id = artists.id;
INNER JOIN # combines if join condition is true
LEFT JOIN # every row in the left is returned. LEFT = first table in statement


select
  case name
    when 'kale-smoothie'    then 'smoothie'
    when 'banana-smoothie'  then 'smoothie'
    when 'orange-juice'     then 'drink'
    when 'soda'             then 'drink'
    when 'blt'              then 'sandwich'
    when 'grilled-cheese'   then 'sandwich'
    when 'tikka-masala'     then 'dinner'
    when 'chicken-parm'     then 'dinner'
    else 'other'
  end as category, round(1.0 * sum(amount_paid) /
    (select sum(amount_paid) from order_items) * 100, 2) as pct
from order_items
group by 1
order by 2 desc;

select name, round(1.0 * count(distinct order_id) /
  count(distinct orders.delivered_to), 2) as reorder_rate
from order_items
  join orders on
    orders.id = order_items.order_id
group by 1
order by 2 desc;


# Uncorrelated Subqueries
SELECT *
FROM flights
WHERE origin in (
    SELECT code
    FROM airports
    WHERE elevation > 2000);

SELECT a.dep_month,
     a.dep_day_of_week,
     AVG(a.flight_distance) AS average_distance
FROM (
      SELECT dep_month,
            dep_day_of_week,
             dep_date,
             sum(distance) AS flight_distance
        FROM flights
       GROUP BY 1,2,3
     ) a
GROUP BY 1,2
ORDER BY 1,2;

# Correlated Subqueries
SELECT id
FROM flights AS f
WHERE distance > (
 SELECT AVG(distance)
 FROM flights
 WHERE carrier = f.carrier);